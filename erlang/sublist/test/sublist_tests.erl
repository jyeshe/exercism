%% Based on canonical data version 1.1.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/sublist/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(sublist_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_empty_lists_test'() ->
    ?assertEqual(equal, sublist:relation([], [])),
    ?assert(sublist:is_equal([], [])),
    ?assertNot(sublist:is_unequal([], [])),
    ?assert(sublist:is_sublist([], [])),
    ?assert(sublist:is_superlist([], [])).

'2_empty_list_within_non_empty_list_test'() ->
    ?assertEqual(sublist, sublist:relation([], [1, 2, 3])),
    ?assertNot(sublist:is_equal([], [1, 2, 3])),
    ?assert(sublist:is_unequal([], [1, 2, 3])),
    ?assert(sublist:is_sublist([], [1, 2, 3])),
    ?assertNot(sublist:is_superlist([], [1, 2, 3])).

'3_non_empty_list_contains_empty_list_test'() ->
    ?assertEqual(superlist,
		 sublist:relation([1, 2, 3], [])),
    ?assertNot(sublist:is_equal([1, 2, 3], [])),
    ?assert(sublist:is_unequal([1, 2, 3], [])),
    ?assertNot(sublist:is_sublist([1, 2, 3], [])),
    ?assert(sublist:is_superlist([1, 2, 3], [])).

'4_list_equals_itself_test'() ->
    ?assertEqual(equal,
		 sublist:relation([1, 2, 3], [1, 2, 3])),
    ?assert(sublist:is_equal([1, 2, 3], [1, 2, 3])),
    ?assertNot(sublist:is_unequal([1, 2, 3], [1, 2, 3])),
    ?assert(sublist:is_sublist([1, 2, 3], [1, 2, 3])),
    ?assert(sublist:is_superlist([1, 2, 3], [1, 2, 3])).

'5_different_lists_test'() ->
    ?assertEqual(unequal,
		 sublist:relation([1, 2, 3], [2, 3, 4])),
    ?assertNot(sublist:is_equal([1, 2, 3], [2, 3, 4])),
    ?assert(sublist:is_unequal([1, 2, 3], [2, 3, 4])),
    ?assertNot(sublist:is_sublist([1, 2, 3], [2, 3, 4])),
    ?assertNot(sublist:is_superlist([1, 2, 3], [2, 3, 4])).

'6_false_start_test'() ->
    ?assertEqual(sublist,
		 sublist:relation([1, 2, 5], [0, 1, 2, 3, 1, 2, 5, 6])),
    ?assertNot(sublist:is_equal([1, 2, 5],
				[0, 1, 2, 3, 1, 2, 5, 6])),
    ?assert(sublist:is_unequal([1, 2, 5],
			       [0, 1, 2, 3, 1, 2, 5, 6])),
    ?assert(sublist:is_sublist([1, 2, 5],
			       [0, 1, 2, 3, 1, 2, 5, 6])),
    ?assertNot(sublist:is_superlist([1, 2, 5],
				    [0, 1, 2, 3, 1, 2, 5, 6])).

'7_consecutive_test'() ->
    ?assertEqual(sublist,
		 sublist:relation([1, 1, 2], [0, 1, 1, 1, 2, 1, 2])),
    ?assertNot(sublist:is_equal([1, 1, 2],
				[0, 1, 1, 1, 2, 1, 2])),
    ?assert(sublist:is_unequal([1, 1, 2],
			       [0, 1, 1, 1, 2, 1, 2])),
    ?assert(sublist:is_sublist([1, 1, 2],
			       [0, 1, 1, 1, 2, 1, 2])),
    ?assertNot(sublist:is_superlist([1, 1, 2],
				    [0, 1, 1, 1, 2, 1, 2])).

'8_sublist_at_start_test'() ->
    ?assertEqual(sublist,
		 sublist:relation([0, 1, 2], [0, 1, 2, 3, 4, 5])),
    ?assertNot(sublist:is_equal([0, 1, 2],
				[0, 1, 2, 3, 4, 5])),
    ?assert(sublist:is_unequal([0, 1, 2],
			       [0, 1, 2, 3, 4, 5])),
    ?assert(sublist:is_sublist([0, 1, 2],
			       [0, 1, 2, 3, 4, 5])),
    ?assertNot(sublist:is_superlist([0, 1, 2],
				    [0, 1, 2, 3, 4, 5])).

'9_sublist_in_middle_test'() ->
    ?assertEqual(sublist,
		 sublist:relation([2, 3, 4], [0, 1, 2, 3, 4, 5])),
    ?assertNot(sublist:is_equal([2, 3, 4],
				[0, 1, 2, 3, 4, 5])),
    ?assert(sublist:is_unequal([2, 3, 4],
			       [0, 1, 2, 3, 4, 5])),
    ?assert(sublist:is_sublist([2, 3, 4],
			       [0, 1, 2, 3, 4, 5])),
    ?assertNot(sublist:is_superlist([2, 3, 4],
				    [0, 1, 2, 3, 4, 5])).

'10_sublist_at_end_test'() ->
    ?assertEqual(sublist,
		 sublist:relation([3, 4, 5], [0, 1, 2, 3, 4, 5])),
    ?assertNot(sublist:is_equal([3, 4, 5],
				[0, 1, 2, 3, 4, 5])),
    ?assert(sublist:is_unequal([3, 4, 5],
			       [0, 1, 2, 3, 4, 5])),
    ?assert(sublist:is_sublist([3, 4, 5],
			       [0, 1, 2, 3, 4, 5])),
    ?assertNot(sublist:is_superlist([3, 4, 5],
				    [0, 1, 2, 3, 4, 5])).

'11_at_start_of_superlist_test'() ->
    ?assertEqual(superlist,
		 sublist:relation([0, 1, 2, 3, 4, 5], [0, 1, 2])),
    ?assertNot(sublist:is_equal([0, 1, 2, 3, 4, 5],
				[0, 1, 2])),
    ?assert(sublist:is_unequal([0, 1, 2, 3, 4, 5],
			       [0, 1, 2])),
    ?assertNot(sublist:is_sublist([0, 1, 2, 3, 4, 5],
				  [0, 1, 2])),
    ?assert(sublist:is_superlist([0, 1, 2, 3, 4, 5],
				 [0, 1, 2])).

'12_in_middle_of_superlist_test'() ->
    ?assertEqual(superlist,
		 sublist:relation([0, 1, 2, 3, 4, 5], [2, 3])),
    ?assertNot(sublist:is_equal([0, 1, 2, 3, 4, 5],
				[2, 3])),
    ?assert(sublist:is_unequal([0, 1, 2, 3, 4, 5], [2, 3])),
    ?assertNot(sublist:is_sublist([0, 1, 2, 3, 4, 5],
				  [2, 3])),
    ?assert(sublist:is_superlist([0, 1, 2, 3, 4, 5],
				 [2, 3])).

'13_at_end_of_superlist_test'() ->
    ?assertEqual(superlist,
		 sublist:relation([0, 1, 2, 3, 4, 5], [3, 4, 5])),
    ?assertNot(sublist:is_equal([0, 1, 2, 3, 4, 5],
				[3, 4, 5])),
    ?assert(sublist:is_unequal([0, 1, 2, 3, 4, 5],
			       [3, 4, 5])),
    ?assertNot(sublist:is_sublist([0, 1, 2, 3, 4, 5],
				  [3, 4, 5])),
    ?assert(sublist:is_superlist([0, 1, 2, 3, 4, 5],
				 [3, 4, 5])).

'14_first_list_missing_element_from_second_list_test'() ->
    ?assertEqual(unequal,
		 sublist:relation([1, 3], [1, 2, 3])),
    ?assertNot(sublist:is_equal([1, 3], [1, 2, 3])),
    ?assert(sublist:is_unequal([1, 3], [1, 2, 3])),
    ?assertNot(sublist:is_sublist([1, 3], [1, 2, 3])),
    ?assertNot(sublist:is_superlist([1, 3], [1, 2, 3])).

'15_second_list_missing_element_from_first_list_test'() ->
    ?assertEqual(unequal,
		 sublist:relation([1, 2, 3], [1, 3])),
    ?assertNot(sublist:is_equal([1, 2, 3], [1, 3])),
    ?assert(sublist:is_unequal([1, 2, 3], [1, 3])),
    ?assertNot(sublist:is_sublist([1, 2, 3], [1, 3])),
    ?assertNot(sublist:is_superlist([1, 2, 3], [1, 3])).

'16_order_matters_to_a_list_test'() ->
    ?assertEqual(unequal,
		 sublist:relation([1, 2, 3], [3, 2, 1])),
    ?assertNot(sublist:is_equal([1, 2, 3], [3, 2, 1])),
    ?assert(sublist:is_unequal([1, 2, 3], [3, 2, 1])),
    ?assertNot(sublist:is_sublist([1, 2, 3], [3, 2, 1])),
    ?assertNot(sublist:is_superlist([1, 2, 3], [3, 2, 1])).

'17_same_digits_but_different_numbers_test'() ->
    ?assertEqual(unequal,
		 sublist:relation([1, 0, 1], [10, 1])),
    ?assertNot(sublist:is_equal([1, 0, 1], [10, 1])),
    ?assert(sublist:is_unequal([1, 0, 1], [10, 1])),
    ?assertNot(sublist:is_sublist([1, 0, 1], [10, 1])),
    ?assertNot(sublist:is_superlist([1, 0, 1], [10, 1])).
