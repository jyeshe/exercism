%% Based on canonical data version 3.1.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/robot-simulator/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(robot_simulator_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_robots_are_created_with_a_position_and_direction_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, north, {0, 0}),
    ?assertEqual(north, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'2_negative_positions_are_allowed_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, south, {-1, -1}),
    ?assertEqual(south, robot_simulator:direction(Robot)),
    ?assertEqual({-1, -1}, robot_simulator:position(Robot)).

'3_changes_the_direction_from_north_to_east_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, north, {0, 0}),
    robot_simulator:right(Robot),
    ?assertEqual(east, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'4_changes_the_direction_from_east_to_south_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, east, {0, 0}),
    robot_simulator:right(Robot),
    ?assertEqual(south, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'5_changes_the_direction_from_south_to_west_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, south, {0, 0}),
    robot_simulator:right(Robot),
    ?assertEqual(west, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'6_changes_the_direction_from_west_to_north_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, west, {0, 0}),
    robot_simulator:right(Robot),
    ?assertEqual(north, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'7_changes_the_direction_from_north_to_west_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, north, {0, 0}),
    robot_simulator:left(Robot),
    ?assertEqual(west, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'8_changes_the_direction_from_west_to_south_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, west, {0, 0}),
    robot_simulator:left(Robot),
    ?assertEqual(south, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'9_changes_the_direction_from_south_to_east_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, south, {0, 0}),
    robot_simulator:left(Robot),
    ?assertEqual(east, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'10_changes_the_direction_from_east_to_north_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, east, {0, 0}),
    robot_simulator:left(Robot),
    ?assertEqual(north, robot_simulator:direction(Robot)),
    ?assertEqual({0, 0}, robot_simulator:position(Robot)).

'11_increases_the_y_coordinate_one_when_facing_north_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, north, {0, 0}),
    robot_simulator:advance(Robot),
    ?assertEqual(north, robot_simulator:direction(Robot)),
    ?assertEqual({0, 1}, robot_simulator:position(Robot)).

'12_decreases_the_y_coordinate_by_one_when_facing_south_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, south, {0, 0}),
    robot_simulator:advance(Robot),
    ?assertEqual(south, robot_simulator:direction(Robot)),
    ?assertEqual({0, -1}, robot_simulator:position(Robot)).

'13_increases_the_x_coordinate_by_one_when_facing_east_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, east, {0, 0}),
    robot_simulator:advance(Robot),
    ?assertEqual(east, robot_simulator:direction(Robot)),
    ?assertEqual({1, 0}, robot_simulator:position(Robot)).

'14_decreases_the_x_coordinate_by_one_when_facing_west_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, west, {0, 0}),
    robot_simulator:advance(Robot),
    ?assertEqual(west, robot_simulator:direction(Robot)),
    ?assertEqual({-1, 0}, robot_simulator:position(Robot)).

'15_instructions_to_move_east_and_north_from_readme_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, north, {7, 3}),
    robot_simulator:right(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:left(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:left(Robot),
    ?assertEqual(west, robot_simulator:direction(Robot)),
    ?assertEqual({9, 4}, robot_simulator:position(Robot)).

'16_instructions_to_move_west_and_north_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, north, {0, 0}),
    robot_simulator:left(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:right(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:left(Robot),
    robot_simulator:advance(Robot),
    ?assertEqual(west, robot_simulator:direction(Robot)),
    ?assertEqual({-4, 1}, robot_simulator:position(Robot)).

'17_instructions_to_move_west_and_south_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, east, {2, -7}),
    robot_simulator:right(Robot),
    robot_simulator:right(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:left(Robot),
    robot_simulator:advance(Robot),
    ?assertEqual(south, robot_simulator:direction(Robot)),
    ?assertEqual({-3, -8}, robot_simulator:position(Robot)).

'18_instructions_to_move_east_and_north_test'() ->
    Robot = robot_simulator:create(),
    robot_simulator:place(Robot, south, {8, 4}),
    robot_simulator:left(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:right(Robot),
    robot_simulator:right(Robot),
    robot_simulator:right(Robot),
    robot_simulator:advance(Robot),
    robot_simulator:left(Robot),
    robot_simulator:left(Robot),
    robot_simulator:left(Robot),
    robot_simulator:left(Robot),
    ?assertEqual(north, robot_simulator:direction(Robot)),
    ?assertEqual({11, 5}, robot_simulator:position(Robot)).
